h1. Introduction

Rexster is a Java server application. As with most server applications, it has to perform several tasks before being able to shut down the Virtual Machine (VM) process, hence they need a portable way to be notified of the imminent VM shutdown.

At the moment, the only way to properly shut down a Rexster server instance, is to execute the @rexster.bat@ script shipped with the Rexster distribution, but it's up to the user to take care of this. This implies that the server instance isn't stopped correctly when the computer on which it is deployed is shutdown without executing the above script.

h2. Apache Commons Daemon

"Apache Commons Daemon":http://commons.apache.org/daemon/ is a set of applications and API enabling Java server applications to run as native, non-interactive server applications under Unix and Windows. In Unix, server applications running in background are called _daemons_ and are controlled by the operating system with a set of specified _signals_. Under Windows, such programs are called services and are controlled by appropriate calls to specific functions defined in the application binary. Although the ways of dealing with the problem are different, in both cases the operating system can notify a server application of its imminent shutdown, and the underlying application has the ability to perform certain tasks before its process of execution is destroyed.

Wrapping Rexster as a _Unix daemon_ or as a _Windows service_ enables the management of this server application lifecycle through the mechanisms provided natively by both Unix and Windows operating systems.

h1. Downloading the Wrapper

To get started, first download @procrun@. "Procrun":http://commons.apache.org/daemon/procrun.html is a set of applications which allow Windows users to wrap (mostly) Java applications (e.g. Tomcat) as a Windows service. The service can be set to automatically start when the machine boots and will continue to run even when no user is logged onto the machine.

 # Go to the "Apache Commons Daemon download page":http://commons.apache.org/daemon/download_daemon.cgi.
 # Click on *Browse native binaries download area...*: note the index *commons/daemon/binaries/* (even if the title in the page reports *Index of dist/commons*).
 # Click on *windows*. Note the index of *commons/daemon/binaries/windows*.
 # Click on *commons-daemon-?.?.?-bin-windows.zip*. The download starts.
 # Unzip the file in a directory of your choice. The content of the archive is depicted below:

```text
commons-daemon-1.0.7-bin-windows
|
\---amd64
    |
    \---prunsrv.exe
|
\---ia64
    |
    \---prunsrv.exe
|
\---LICENCE.txt
|
\---NOTICE.txt
|
\---prunmgr.exe
|
\---prunsrv.exe
|
\---RELEASE-NOTES.txt
```

Th @prunmgr@ is a GUI application for monitoring and configuring Windows services wrapped with @procrun@. @prunsrv@ is a service application for running applications as services. It can convert any application (not just Java applications) to run as a service. The directory @amd64@ contains a version of @prunsrv@ for x86-64 machines while the directory @ia64@ contains a version of @prunsrv@ for Itanium 64 machines.

Place the downloaded applications in a folder under the Rexster installation folder.

# Go to the Rexster folder, in the following referred as @%%REXSTER_ROOT%%@
# Create a new directory and name it *service*
# Copy there the appropriate versions of @prunsrv@ and @prunmgr@ according to the architecture of the system.

h1. Configuration and installation

Wrapping Rexster as a service, involves executing a short script that uses the @prunsrv@ application to configure a Windows Service.

Before defining the Windows Service, rename @prunsrv@ and @prunmgr@ according to the name of the service. Both applications require the name of the service to manage and monitor as parameter, but this can be avoided by naming them with the name of the service. In this case, rename them respectively @Rexster@ and @Rexsterw@ as _Rexster_ is the name of the service that will be configured in the upcoming script below. To use a different service name, rename both applications respectively as needed, such as @myservicename@ and @myservicenamew@.

After that, create the file @%%REXSTER_ROOT%%\service\installService.bat@ with the content depicted below:

```bat
:: Rextser Windows Service Installation
@echo off
rem Remove surrounding quotes from the first parameter
set str=%~1
rem Check JVM DLL location parameter
if "%str%" == "" goto missingJVM
set JVM_DLL=%str%
rem Remove surrounding quotes from the second parameter
set str=%~2
rem Check Rexster Home parameter
if "%str%" == "" goto missingRexsterHome
set REXSTER_HOME=%str%

rem Install the service
Rexster.exe //IS --DisplayName="Rexster" \
--Description="Rexster is a multi-faceted graph server that exposes any Blueprints graph through several mechanisms with a general focus on REST." \
--StartClass=com.tinkerpop.rexster.WebServer --StopClass=com.tinkerpop.rexster.WebServer \
--Classpath="%REXSTER_HOME%\lib\*";"%REXSTER_HOME%\ext\*" --JvmMs=32 --JvmMx=512 --LogPath="%REXSTER_HOME%\log" \
--StartParams="-s -webroot=%REXSTER_HOME%\bin\public;-configuration=%REXSTER_HOME%\bin\rexster.xml" --StartPath="%REXSTER_HOME%\bin" \
--StopPath="%REXSTER_HOME%\bin" --Jvm="%JVM_DLL%" --StartMode=jvm --StopMode=jvm --Startup=auto --DependsOn="OrientDBGraph"
--StopParams="-x"
EXIT /B

:missingJVM
echo Insert the JVM DLL location
goto printUsage

:missingRexsterHome
echo Insert the Rexster Home
goto printUsage

:printUsage
echo usage:
echo     installService JVM_DLL_location Rexster_Home
EXIT /B
```

The script requires two input parameters:

# The location of jvm.dll, for example _C:\Program Files\Java\jdk1.???\jre\bin\server\jvm.dll_
# The location of the actual Rexster Home (the one under the _target_ folder), for example _D:\rexster-?.?\target\rexster-?.?-standalone_

The service is actually installed when executing @Rexster.exe@ (originally @prunsrv@) with the appropriate set of command line arguments and parameters as shown above.

The command line argument @//IS@ states that the execution of that application will result in a service installation.
Below there is the table with the command line parameters used in the above script.

|_. Parameter name|_. Description|_. Source|
|@--DisplayName@|The name displayed in the Windows Services Management Console|Custom|
|@--Description@|The description displayed in the Windows Services Management Console|Custom|
|@--StartClass@|Class that contains the startup method (= the method to be called to start the application). The default method to be called is the @main@ method|The class reported in _%%REXSTER_HOME%%\bin\rexster.bat_|
|@--StopClass@|Class that will be used when receiving a Stop service signal. The default method to be called is the @main@ method|The class reported in _%%REXSTER_HOME%%\bin\rexster.bat_|
|@--Classpath@|Set the Java classpath|The value of the @-cp@ parameter specified in _%%REXSTER_HOME%%\bin\rexster.bat_|
|@--JvmMs@|Initial memory pool size in MB|The JVM option @-Xms@ reported in _%%REXSTER_HOME%%\bin\rexster.bat_|
|@--JvmMx@|Maximum memory pool size in MB|The JVM option @-Xmx@ reported in _%%REXSTER_HOME%%\bin\rexster.bat_|
|@--LogPath@|Path used by prunsrv for logging|The _log_ folder under _%%REXSTER_HOME%%_|
|@--StartParams@|List of parameters to be passed to the be passed to the @StartClass@|The parameter passed to _%%REXSTER_HOME%%\bin\rexster-start.bat_ and reported in _%%REXSTER_ROOT%%\rexster.bat_|
|@--StartPath@|Working path for the StartClass|_%%REXSTER_HOME%%\bin_|
|@--StopPath@|Working path for the StopClass|_%%REXSTER_HOME%%\bin_|
|@--Jvm@|Which _jvm.dll_ to use: the default one or the one located in the specified full path|The first input parameter of this script. Ensure that you insert the location of the Java HotSpot Server VM as a full path. We will use the server version for both start and stop.|
|@--StartMode@|Specify how to start the process. In this case, it will start Java in-process and not as a separate image|Based on Apache Tomcat configuration|
|@--StopMode@|The same as @--StartMode@|Based on Apache Tomcat configuration|
|@--Startup@|States if the service should start at machine start up (@auto@) or manually (@manual@)|Custom|
|@--DependsOn@|List of services that this service depends on. The names of such service are separated using either *#* or *;* characters|The name of the service relating to an external Tinkerpop-enabled graph database server, for example _"OrientDBGraph":http://code.google.com/p/orient/wiki/WrappingAsAWindowsService_|

For a complete reference to all available parameters and arguments for prunsrv and prunmgr, visit "Procrun":http://commons.apache.org/daemon/procrun.html

In order to install the service:

# Open the Windows command shell
# Go to _%%REXSTER_ROOT%%\service_, for example typing in the shell
# Execute the _installService.bat_ specifying the _jvm.dll_ location and the Rexster Home as full paths, for example typing in the shell:

```bat
>installService.bat "C:\Program Files\Java\jdk1.???\jre\bin\server\jvm.dll" D:\rexster-?.?\target\rexster-?.?-standalone
```

Check to see that the service is running, by opening the Windows Services Management Console - from the taskbar, click on _Start_, _Control Panel_, _Administrative Tools_ and then _Service_ - and check the existance of a service with the same name specified as value of the @--DisplayName@ parameter (in this case @Rexster@).

You can also use _%%REXSTER_ROOT%%\service\Rexsterw.exe_ to manage and monitor the _Rexster_ service.